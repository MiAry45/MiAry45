// stack implementation
class Stack{
    int size;
    int *arr;
    int top;
    public:
        Stack(){ // constructor
            top = -1;
            size = 1000;
            arr = new int[size];
        }
        void push(int x){
            top++;
            arr[top] = x;
        }
        int pop(){
            int x = arr[top];
            top--;
            return x;
        }
        int  Top(){
            int x = arr[top];
            return x;
        }
         int Size(){
            return top+1;
        }
};
class Queue{
    int *arr;
    int start,end,maxsize,currsize;
    public:
        Queue(){
            arr = new int[15];
            start =-1;
            end =-1;
            maxsize = 15;
            currsize = 0;
        }
        void push(int x){
            if(currsize >= maxsize) {
                cout<<"limit exceeded... exiting\n";
                exit(1);
            }
            if(end == -1){
                start =0;
                end =0;
            }
            else{
                end = (end+1)%maxsize;
            }
            currsize++;
            arr[end] = x;

        }
        int pop(){
            if(start == -1){
                cout<<"segmentation fault....exiting the code\n";
                exit(1);
            }
            int num = arr[start];
            if(currsize == 1){
                start =-1;
                end =-1;
            }
            else{
                start = (start+1)%maxsize;
            }
            currsize--;
            return num;
        }
        Top(){
            if(start == -1){
                cout<<"segmentation fault....exiting the code\n";
                exit(1);
            }
            return arr[start];
        }
        Size(){
            return currsize;
        }
};
